"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTouchIconFiles = exports.generateTouchIconHtml = exports.TouchIconPngSize = exports.TouchIconFileName = void 0;
const _1 = require(".");
const helper_1 = require("../icon/helper");
const svg_1 = require("../svg");
exports.TouchIconFileName = 'apple-touch-icon.png';
exports.TouchIconPngSize = 180;
const generateTouchIconHtml = (faviconPath, appTitle, transformer = _1.identityFaviconAssetPathTransformer) => {
    const markups = [
        `<link rel="apple-touch-icon" sizes="180x180" href="${transformer(`${faviconPath}${exports.TouchIconFileName}`, true, false)}" />`,
    ];
    const cssSelectors = [
        `link[rel="apple-touch-icon"]`
    ];
    if (appTitle) {
        markups.push(`<meta name="apple-mobile-web-app-title" content="${appTitle}" />`);
        cssSelectors.push(`meta[name="apple-mobile-web-app-title"]`);
    }
    return { markups, cssSelectors };
};
exports.generateTouchIconHtml = generateTouchIconHtml;
const generateTouchIconFiles = (masterIcon, settings, imageAdapeter) => __awaiter(void 0, void 0, void 0, function* () {
    const transformedIcon = (0, helper_1.transformSvg)(masterIcon.icon, settings.transformation, imageAdapeter, exports.TouchIconPngSize);
    const touchIcon = yield imageAdapeter.convertSvgToPng((0, svg_1.scaleSvg)(transformedIcon, exports.TouchIconPngSize, imageAdapeter));
    return {
        [exports.TouchIconFileName]: touchIcon
    };
});
exports.generateTouchIconFiles = generateTouchIconFiles;
