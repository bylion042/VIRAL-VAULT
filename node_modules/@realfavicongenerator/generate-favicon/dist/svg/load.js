"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadSvg = void 0;
const _1 = require(".");
const loadSvg = (file, imageAdapter) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        if (file.type === 'image/svg+xml') {
            reader.onload = () => {
                if (reader.result) {
                    const rawSvg = reader.result.toString();
                    const svg = (0, _1.stringToSvg)(rawSvg, imageAdapter);
                    resolve(svg);
                }
            };
            reader.readAsText(file);
        }
        else {
            reader.onload = () => {
                const binaryData = reader.result;
                const svg = (0, _1.bitmapToSvg)(binaryData, imageAdapter).then(svg => {
                    resolve(svg);
                });
            };
            reader.readAsArrayBuffer(file);
        }
    });
});
exports.loadSvg = loadSvg;
